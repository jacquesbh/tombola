{% extends 'base.html.twig' %}

{% block title %}En ligne - Tombola{% endblock %}

{% block body %}
<div class="min-h-screen flex items-center justify-center px-4">
    <div class="bg-white rounded-3xl shadow-2xl p-8 max-w-md w-full text-center">
        <div class="mb-8">
            <div class="inline-block relative">
                <img src="{{ player.gravatarUrl }}" 
                     alt="{{ player.firstName }}" 
                     class="w-32 h-32 rounded-full border-8 {{ isPending ? 'border-orange-500' : 'border-green-500' }} shadow-2xl mx-auto">
                <div class="absolute -top-2 -right-2 {{ isPending ? 'bg-orange-500' : 'bg-green-500' }} text-white rounded-full w-12 h-12 flex items-center justify-center animate-pulse">
                    <span class="text-2xl">{{ isPending ? '‚è≥' : '‚úì' }}</span>
                </div>
            </div>
        </div>

        <h1 class="text-4xl font-bold text-gray-800 mb-2">
            {{ player.firstName }} {{ player.lastName }}
        </h1>
        
        {% if isPending %}
        <div class="inline-flex items-center gap-2 bg-orange-100 text-orange-800 px-6 py-3 rounded-full font-bold text-lg mb-8">
            <span class="w-3 h-3 bg-orange-500 rounded-full animate-pulse"></span>
            EN ATTENTE
        </div>

        <div class="bg-gradient-to-r from-orange-100 to-yellow-100 rounded-2xl p-6">
            <p class="text-gray-700 text-lg">
                Vous √™tes en attente pour le prochain tour.<br>
                <span class="font-semibold">Restez connect√© ! ‚è≥</span>
            </p>
        </div>
        {% else %}
        <div class="inline-flex items-center gap-2 bg-green-100 text-green-800 px-6 py-3 rounded-full font-bold text-lg mb-8">
            <span class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
            ONLINE
        </div>

        <div class="bg-gradient-to-r from-purple-100 to-indigo-100 rounded-2xl p-6">
            <p class="text-gray-700 text-lg">
                Vous participez √† la tombola !<br>
                <span class="font-semibold">Bonne chance ! üçÄ</span>
            </p>
        </div>
        {% endif %}

        <p class="text-gray-500 text-sm mt-8">
            Gardez cette page ouverte pendant la tombola
        </p>
    </div>
</div>

<script>
const code = '{{ code }}';
const playerId = '{{ player.id }}';
const mercureUrl = '{{ mercure_public_url }}';
const mercureToken = '{{ mercure_token }}';

let audioContext = null;

setInterval(() => {
    fetch(`/join/${code}/heartbeat/${playerId}`, {
        method: 'POST',
        keepalive: true
    }).catch(err => console.error('Heartbeat failed:', err));
}, 3000);

document.addEventListener('click', () => {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        console.log('üîä Audio context initialized');
    }
}, { once: true });

document.addEventListener('touchstart', () => {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        console.log('üîä Audio context initialized');
    }
}, { once: true });

const mercureTopicUrl = `${mercureUrl}?topic=${encodeURIComponent(`tombola/${code}/players`)}&authorization=${encodeURIComponent(mercureToken)}`;
console.log('Connecting to Mercure:', mercureTopicUrl);
const eventSource = new EventSource(mercureTopicUrl);

eventSource.onopen = () => {
    console.log('‚úÖ Mercure connection opened for player');
};

eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('üì® Mercure event received:', data);

    if (data.type === 'round_ready') {
        location.reload();
    }
    
    if (data.type === 'winner_selected' && data.winnerId === playerId) {
        showWinnerCelebration();
    }
};

eventSource.onerror = (error) => {
    console.error('‚ùå EventSource error:', error);
};

function showWinnerCelebration() {
    playWinnerSound();
    createConfettiRain();
    
    document.body.style.background = 'linear-gradient(135deg, #ffd700 0%, #ffed4e 50%, #ffd700 100%)';
    
    const statusBadge = document.querySelector('.inline-flex.items-center.gap-2');
    if (statusBadge) {
        statusBadge.innerHTML = `
            <span class="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></span>
            üéâ GAGNANT ! üéâ
        `;
        statusBadge.className = 'inline-flex items-center gap-2 bg-yellow-100 text-yellow-800 px-6 py-3 rounded-full font-bold text-lg mb-8 animate-pulse';
    }
    
    const messageBox = document.querySelector('.bg-gradient-to-r');
    if (messageBox) {
        messageBox.innerHTML = `
            <p class="text-gray-700 text-2xl font-bold">
                üèÜ F√âLICITATIONS ! üèÜ<br>
                <span class="font-semibold text-3xl">VOUS AVEZ GAGN√â !</span>
            </p>
        `;
        messageBox.className = 'bg-gradient-to-r from-yellow-100 to-orange-100 rounded-2xl p-6 animate-pulse';
    }
}

function playWinnerSound() {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
    
    if (audioContext.state === 'suspended') {
        audioContext.resume();
    }
    
    const notes = [523.25, 659.25, 783.99, 1046.50];
    let time = audioContext.currentTime;
    
    notes.forEach((freq, index) => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = freq;
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0.3, time);
        gainNode.gain.exponentialRampToValueAtTime(0.01, time + 0.5);
        
        oscillator.start(time);
        oscillator.stop(time + 0.5);
        
        time += 0.15;
    });
    
    console.log('üéµ Winner sound played');
}

function createConfettiRain() {
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#ffa500', '#ff1493', '#ffd700'];
    const confettiCount = 200;
    
    for (let i = 0; i < confettiCount; i++) {
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.style.position = 'fixed';
            confetti.style.width = '10px';
            confetti.style.height = '10px';
            confetti.style.top = '-10px';
            confetti.style.left = Math.random() * 100 + 'vw';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.zIndex = '10000';
            confetti.style.borderRadius = '50%';
            confetti.style.animation = `confetti-fall ${(Math.random() * 3 + 2)}s linear forwards`;
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 5000);
        }, i * 20);
    }
}
</script>

<style>
@keyframes confetti-fall {
    to {
        transform: translateY(100vh) rotate(360deg);
        opacity: 0;
    }
}
</style>
{% endblock %}
