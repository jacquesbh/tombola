{% extends 'base.html.twig' %}

{% block title %}{{ isPending ? '⏳ Pending' : '✅ Online' }} - Tombola{% endblock %}

{% block body %}
<div class="min-h-screen flex items-center justify-center px-4">
    <div class="absolute top-4 right-4">
        <select id="language-selector" class="bg-white border-2 border-gray-300 rounded-lg px-3 py-2 text-sm font-semibold cursor-pointer hover:border-purple-500 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-colors">
            <option value="en">🇬🇧 English</option>
            <option value="fr">🇫🇷 Français</option>
        </select>
    </div>
    
    <div class="bg-white rounded-3xl shadow-2xl p-8 max-w-md w-full text-center">
        <div class="mb-8">
            <div class="inline-block relative">
                <img src="{{ player.gravatarUrl }}" 
                     alt="{{ player.firstName }}" 
                     class="w-32 h-32 rounded-full border-8 {{ isPending ? 'border-orange-500' : 'border-green-500' }} shadow-2xl mx-auto">
                <div class="absolute -top-2 -right-2 {{ isPending ? 'bg-orange-500' : 'bg-green-500' }} text-white rounded-full w-12 h-12 flex items-center justify-center animate-pulse">
                    <span class="text-2xl">{{ isPending ? '⏳' : '✓' }}</span>
                </div>
            </div>
        </div>

        <h1 class="text-4xl font-bold text-gray-800 mb-2">
            {{ player.firstName }} {{ player.lastName }}
        </h1>
        
        {% if isPending %}
        <div class="inline-flex items-center gap-2 bg-orange-100 text-orange-800 px-6 py-3 rounded-full font-bold text-lg mb-8">
            <span class="w-3 h-3 bg-orange-500 rounded-full animate-pulse"></span>
            <span data-i18n="status.pending">PENDING</span>
        </div>

        <div class="bg-gradient-to-r from-orange-100 to-yellow-100 rounded-2xl p-6">
            <p class="text-gray-700 text-lg">
                <span data-i18n="status.pendingMessage1">You are waiting for the next round.</span><br>
                <span class="font-semibold"><span data-i18n="status.pendingMessage2">Stay connected!</span> ⏳</span>
            </p>
        </div>
        {% else %}
        <div class="inline-flex items-center gap-2 bg-green-100 text-green-800 px-6 py-3 rounded-full font-bold text-lg mb-8">
            <span class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
            <span data-i18n="status.online">ONLINE</span>
        </div>

        <div class="bg-gradient-to-r from-purple-100 to-indigo-100 rounded-2xl p-6">
            <p class="text-gray-700 text-lg">
                <span data-i18n="status.onlineMessage1">You are participating in the raffle!</span><br>
                <span class="font-semibold"><span data-i18n="status.onlineMessage2">Good luck!</span> 🍀</span>
            </p>
        </div>
        {% endif %}

        <div class="bg-yellow-50 border-2 border-yellow-300 rounded-lg p-4 mt-8">
            <p class="text-yellow-800 text-sm font-semibold" data-i18n="status.keepOpen">
                ⚠️ Keep this page open and active during the raffle or you will be disconnected!
            </p>
        </div>
        
        <button id="quit-btn" 
                class="mt-6 text-gray-400 hover:text-gray-600 text-sm transition-colors"
                data-i18n="status.quit">
            ↩️ Leave the raffle
        </button>
    </div>
</div>

<script>
(function() {
const code = '{{ code }}';
const playerId = '{{ player.id }}';
const mercureUrl = '{{ mercure_public_url }}';
const mercureToken = '{{ mercure_token }}';

const translations = {
    en: {
        'status.online': 'ONLINE',
        'status.offline': 'OFFLINE',
        'status.pending': 'PENDING',
        'status.winner': '🎉 WINNER! 🎉',
        'status.onlineMessage1': 'You are participating in the raffle!',
        'status.onlineMessage2': 'Good luck!',
        'status.offlineMessage1': 'You were disconnected because the tab was inactive.',
        'status.offlineMessage2': 'Reconnect to participate!',
        'status.pendingMessage1': 'You are waiting for the next round.',
        'status.pendingMessage2': 'Stay connected!',
        'status.winnerMessage': 'CONGRATULATIONS!',
        'status.winnerMessage2': 'YOU WON!',
        'status.keepOpen': '⚠️ Keep this page open and active during the raffle or you will be disconnected!',
        'status.quit': '↩️ Leave the raffle',
        'status.reconnect': '🔄 Reconnect',
        'alert.quit': 'Do you really want to leave the raffle?',
        'alert.reconnectError': 'Reconnection error. Please reload the page.',
        'title.online': '✅ Online',
        'title.offline': '📴 Offline',
        'title.pending': '⏳ Pending'
    },
    fr: {
        'status.online': 'EN LIGNE',
        'status.offline': 'HORS LIGNE',
        'status.pending': 'EN ATTENTE',
        'status.winner': '🎉 GAGNANT ! 🎉',
        'status.onlineMessage1': 'Vous participez à la tombola !',
        'status.onlineMessage2': 'Bonne chance !',
        'status.offlineMessage1': 'Vous avez été déconnecté car l\'onglet était inactif.',
        'status.offlineMessage2': 'Reconnectez-vous pour participer !',
        'status.pendingMessage1': 'Vous êtes en attente pour le prochain tour.',
        'status.pendingMessage2': 'Restez connecté !',
        'status.winnerMessage': 'FÉLICITATIONS !',
        'status.winnerMessage2': 'VOUS AVEZ GAGNÉ !',
        'status.keepOpen': '⚠️ Gardez cette page ouverte et active pendant la tombola ou vous serez déconnecté !',
        'status.quit': '↩️ Quitter la tombola',
        'status.reconnect': '🔄 Se reconnecter',
        'alert.quit': 'Voulez-vous vraiment quitter la tombola ?',
        'alert.reconnectError': 'Erreur lors de la reconnexion. Rechargez la page.',
        'title.online': '✅ En ligne',
        'title.offline': '📴 Hors ligne',
        'title.pending': '⏳ En attente'
    }
};

let currentLanguage = localStorage.getItem('tombola_language') || 'en';

function setLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem('tombola_language', lang);
    
    document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.getAttribute('data-i18n');
        if (translations[lang] && translations[lang][key]) {
            element.textContent = translations[lang][key];
        }
    });
    
    document.getElementById('language-selector').value = lang;
}

function t(key) {
    return translations[currentLanguage][key] || key;
}

setLanguage(currentLanguage);

document.getElementById('language-selector').addEventListener('change', (e) => {
    setLanguage(e.target.value);
});

sessionStorage.setItem(`tombola_player_${code}`, JSON.stringify({
    playerId: playerId,
    firstName: '{{ player.firstName }}',
    lastName: '{{ player.lastName }}',
    email: '{{ player.email }}'
}));

let audioContext = null;
let heartbeatInterval = null;
let statusCheckInterval = null;

function startHeartbeat() {
    if (heartbeatInterval) {
        return;
    }
    
    console.log('💚 Starting heartbeat');
    heartbeatInterval = setInterval(() => {
        console.log('💓 Heartbeat sent');
        fetch(`/join/${code}/heartbeat/${playerId}`, {
            method: 'POST',
            keepalive: true
        }).catch(err => console.error('❌ Heartbeat failed:', err));
    }, 3000);
    
    console.log('💓 Heartbeat sent (initial)');
    fetch(`/join/${code}/heartbeat/${playerId}`, {
        method: 'POST',
        keepalive: true
    }).catch(err => console.error('❌ Heartbeat failed:', err));
}

function startStatusCheck() {
    if (statusCheckInterval) {
        return;
    }
    
    console.log('🔍 Starting status check');
    statusCheckInterval = setInterval(() => {
        checkCurrentStatus();
    }, 3000);
}

function stopStatusCheck() {
    if (statusCheckInterval) {
        console.log('⏹️ Stopping status check');
        clearInterval(statusCheckInterval);
        statusCheckInterval = null;
    }
}

function checkCurrentStatus() {
    fetch(`/join/${code}/status/${playerId}`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        console.log('🔍 Status check response:', data);
        
        if (data.removed) {
            location.reload();
            return;
        }
        
        if (data.isOffline) {
            console.log('📴 Joueur marqué offline côté serveur');
            setOfflineState();
            stopHeartbeat();
            stopStatusCheck();
        }
    })
    .catch(err => console.error('Status check failed:', err));
}

function stopHeartbeat() {
    if (heartbeatInterval) {
        console.log('💔 Stopping heartbeat (tab hidden)');
        clearInterval(heartbeatInterval);
        heartbeatInterval = null;
    }
}

function setOfflineState() {
    console.log('📴 Passage en mode OFFLINE');
    
    document.title = t('title.offline') + ' - Tombola';
    
    const statusBadge = document.querySelector('.inline-flex.items-center.gap-2');
    const messageBox = document.querySelector('.bg-gradient-to-r');
    const avatar = document.querySelector('img.rounded-full');
    
    if (statusBadge) {
        statusBadge.innerHTML = `
            <span class="w-3 h-3 bg-gray-500 rounded-full"></span>
            <span data-i18n="status.offline">${t('status.offline')}</span>
        `;
        statusBadge.className = 'inline-flex items-center gap-2 bg-gray-100 text-gray-800 px-6 py-3 rounded-full font-bold text-lg mb-8';
    }
    
    if (messageBox) {
        messageBox.innerHTML = `
            <p class="text-gray-700 text-lg mb-4">
                <span data-i18n="status.offlineMessage1">${t('status.offlineMessage1')}</span><br>
                <span class="font-semibold"><span data-i18n="status.offlineMessage2">${t('status.offlineMessage2')}</span> 📱</span>
            </p>
            <button id="reconnect-btn" 
                    class="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-bold py-3 px-8 rounded-lg text-lg shadow-lg transform hover:scale-105 transition-all duration-200"
                    data-i18n="status.reconnect">
                ${t('status.reconnect')}
            </button>
        `;
        messageBox.className = 'bg-gradient-to-r from-gray-100 to-gray-200 rounded-2xl p-6';
        
        setTimeout(() => {
            const reconnectBtn = document.getElementById('reconnect-btn');
            if (reconnectBtn) {
                reconnectBtn.addEventListener('click', handleReconnect);
            }
        }, 100);
    }
    
    if (avatar) {
        avatar.className = 'w-32 h-32 rounded-full border-8 border-gray-400 shadow-2xl mx-auto opacity-50';
    }
}

function setOnlineState() {
    console.log('✅ Passage en mode ONLINE');
    
    document.title = t('title.online') + ' - Tombola';
    
    const statusBadge = document.querySelector('.inline-flex.items-center.gap-2');
    const messageBox = document.querySelector('.bg-gradient-to-r');
    const avatar = document.querySelector('img.rounded-full');
    
    if (statusBadge) {
        statusBadge.innerHTML = `
            <span class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></span>
            <span data-i18n="status.online">${t('status.online')}</span>
        `;
        statusBadge.className = 'inline-flex items-center gap-2 bg-green-100 text-green-800 px-6 py-3 rounded-full font-bold text-lg mb-8';
    }
    
    if (messageBox) {
        messageBox.innerHTML = `
            <p class="text-gray-700 text-lg">
                <span data-i18n="status.onlineMessage1">${t('status.onlineMessage1')}</span><br>
                <span class="font-semibold"><span data-i18n="status.onlineMessage2">${t('status.onlineMessage2')}</span> 🍀</span>
            </p>
        `;
        messageBox.className = 'bg-gradient-to-r from-purple-100 to-indigo-100 rounded-2xl p-6';
    }
    
    if (avatar) {
        avatar.className = 'w-32 h-32 rounded-full border-8 border-green-500 shadow-2xl mx-auto';
    }
}

function updatePlayerStatus() {
    fetch(`/join/${code}/status/${playerId}`, {
        method: 'GET'
    })
    .then(response => response.json())
    .then(data => {
        console.log('📊 Player status:', data);
        
        if (data.removed) {
            console.log('❌ Player was removed, redirecting...');
            location.reload();
            return;
        }
        
        const statusBadge = document.querySelector('.inline-flex.items-center.gap-2');
        const messageBox = document.querySelector('.bg-gradient-to-r');
        const avatar = document.querySelector('img.rounded-full');
        
        if (data.isPending) {
            console.log('⏳ Statut: EN ATTENTE');
            document.title = t('title.pending') + ' - Tombola';
            
            if (statusBadge) {
                statusBadge.innerHTML = `
                    <span class="w-3 h-3 bg-orange-500 rounded-full animate-pulse"></span>
                    <span data-i18n="status.pending">${t('status.pending')}</span>
                `;
                statusBadge.className = 'inline-flex items-center gap-2 bg-orange-100 text-orange-800 px-6 py-3 rounded-full font-bold text-lg mb-8';
            }
            
            if (messageBox) {
                messageBox.innerHTML = `
                    <p class="text-gray-700 text-lg">
                        <span data-i18n="status.pendingMessage1">${t('status.pendingMessage1')}</span><br>
                        <span class="font-semibold"><span data-i18n="status.pendingMessage2">${t('status.pendingMessage2')}</span> ⏳</span>
                    </p>
                `;
                messageBox.className = 'bg-gradient-to-r from-orange-100 to-yellow-100 rounded-2xl p-6';
            }
            
            if (avatar) {
                avatar.className = 'w-32 h-32 rounded-full border-8 border-orange-500 shadow-2xl mx-auto';
            }
        } else {
            console.log('✅ Statut: ONLINE');
            setOnlineState();
        }
    })
    .catch(err => console.error('Status check failed:', err));
}

function handleReconnect() {
    console.log('🔄 Reconnexion demandée par l\'utilisateur');
    
    const playerData = sessionStorage.getItem(`tombola_player_${code}`) 
        ? JSON.parse(sessionStorage.getItem(`tombola_player_${code}`)) 
        : null;
    
    if (!playerData) {
        console.error('❌ Pas de données joueur en sessionStorage');
        window.location.href = `/join/${code}`;
        return;
    }
    
    const formData = new FormData();
    formData.append('firstName', playerData.firstName);
    formData.append('lastName', playerData.lastName);
    formData.append('email', playerData.email);
    formData.append('playerId', playerId);
    
    fetch(`/join/${code}`, {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (response.ok || response.redirected) {
            console.log('✅ Reconnexion réussie - rechargement...');
            window.location.reload();
        } else {
            throw new Error('Erreur serveur');
        }
    })
    .catch(err => {
        console.error('❌ Erreur lors de la reconnexion:', err);
        alert(t('alert.reconnectError'));
    });
}

document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        stopHeartbeat();
    } else {
        console.log('👁️ Onglet redevient visible - vérification du statut...');
        checkCurrentStatus();
        startHeartbeat();
        startStatusCheck();
    }
});

if (!document.hidden) {
    checkCurrentStatus();
    startHeartbeat();
    startStatusCheck();
}

document.getElementById('quit-btn').addEventListener('click', () => {
    if (confirm(t('alert.quit'))) {
        console.log('👋 Joueur quitte volontairement');
        
        sessionStorage.removeItem(`tombola_player_${code}`);
        
        stopHeartbeat();
        
        window.location.href = `/join/${code}`;
    }
});

document.addEventListener('click', () => {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        console.log('🔊 Audio context initialized');
    }
}, { once: true });

document.addEventListener('touchstart', () => {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        console.log('🔊 Audio context initialized');
    }
}, { once: true });

const mercureTopicUrl = `${mercureUrl}?topic=${encodeURIComponent(`tombola/${code}/players`)}&authorization=${encodeURIComponent(mercureToken)}`;
console.log('Connecting to Mercure:', mercureTopicUrl);
const eventSource = new EventSource(mercureTopicUrl);

eventSource.onopen = () => {
    console.log('✅ Mercure connection opened for player');
};

eventSource.onmessage = (event) => {
    const data = JSON.parse(event.data);
    console.log('📨 Mercure event received:', data);

    if (data.type === 'round_ready') {
        location.reload();
    }
    
    if (data.type === 'winner_selected' && data.winnerId === playerId) {
        showWinnerCelebration();
    }
};

eventSource.onerror = (error) => {
    console.error('❌ EventSource error:', error);
};

function showWinnerCelebration() {
    playWinnerSound();
    createConfettiRain();
    
    document.body.style.background = 'linear-gradient(135deg, #ffd700 0%, #ffed4e 50%, #ffd700 100%)';
    
    const statusBadge = document.querySelector('.inline-flex.items-center.gap-2');
    if (statusBadge) {
        statusBadge.innerHTML = `
            <span class="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></span>
            <span data-i18n="status.winner">${t('status.winner')}</span>
        `;
        statusBadge.className = 'inline-flex items-center gap-2 bg-yellow-100 text-yellow-800 px-6 py-3 rounded-full font-bold text-lg mb-8 animate-pulse';
    }
    
    const messageBox = document.querySelector('.bg-gradient-to-r');
    if (messageBox) {
        messageBox.innerHTML = `
            <p class="text-gray-700 text-2xl font-bold">
                🏆 <span data-i18n="status.winnerMessage">${t('status.winnerMessage')}</span> 🏆<br>
                <span class="font-semibold text-3xl" data-i18n="status.winnerMessage2">${t('status.winnerMessage2')}</span>
            </p>
        `;
        messageBox.className = 'bg-gradient-to-r from-yellow-100 to-orange-100 rounded-2xl p-6 animate-pulse';
    }
}

function playWinnerSound() {
    if (!audioContext) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
    }
    
    if (audioContext.state === 'suspended') {
        audioContext.resume();
    }
    
    const notes = [523.25, 659.25, 783.99, 1046.50];
    let time = audioContext.currentTime;
    
    notes.forEach((freq, index) => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = freq;
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0.3, time);
        gainNode.gain.exponentialRampToValueAtTime(0.01, time + 0.5);
        
        oscillator.start(time);
        oscillator.stop(time + 0.5);
        
        time += 0.15;
    });
    
    console.log('🎵 Winner sound played');
}

function createConfettiRain() {
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff', '#ffa500', '#ff1493', '#ffd700'];
    const confettiCount = 200;
    
    for (let i = 0; i < confettiCount; i++) {
        setTimeout(() => {
            const confetti = document.createElement('div');
            confetti.style.position = 'fixed';
            confetti.style.width = '10px';
            confetti.style.height = '10px';
            confetti.style.top = '-10px';
            confetti.style.left = Math.random() * 100 + 'vw';
            confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
            confetti.style.zIndex = '10000';
            confetti.style.borderRadius = '50%';
            confetti.style.animation = `confetti-fall ${(Math.random() * 3 + 2)}s linear forwards`;
            
            document.body.appendChild(confetti);
            
            setTimeout(() => {
                confetti.remove();
            }, 5000);
        }, i * 20);
    }
}
})();
</script>

<style>
@keyframes confetti-fall {
    to {
        transform: translateY(100vh) rotate(360deg);
        opacity: 0;
    }
}
</style>
{% endblock %}
